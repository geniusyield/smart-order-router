{-|
Module      : GeniusYield.OrderBot.OrderBook
Synopsis    : The public query-focused interface of an opaque 'OrderBook' data structure.
Copyright   : (c) 2023 GYELD GMBH
License     : Apache 2.0
Maintainer  : support@geniusyield.co
Stability   : develop
Description : These are the queries _we think_ most order matching strategies will
make in order to perform the order matching task. New queries can be added of course,
but whether or not new queries will be efficient depends entirely on the implementation
under the hood.

For now, the most common "order matching queries" are exported in this module, as
well utilities to construct the order book.

-}
signature GeniusYield.OrderBot.OrderBook (
    -- * Core Order book types
    MultiAssetOrderBook,
    mkMultiAssetOrderBook,
    maOrderBookToList,
    OrderBook,
    -- * Order book components
    Orders,
    buyOrders,
    sellOrders,
    -- * Order book construction
    populateOrderBook,
    buildOrderBookList,
    emptyOrders,
    unconsOrders,
    insertOrder,
    deleteOrder,
    -- * Order book queries
    lowestSell,
    lowestSellMaybe,
    highestBuy,
    highestBuyMaybe,
    lookupBest,
    withoutTip,
    foldlOrders,
    foldrOrders,
    foldlMOrders,
    filterOrders,
    ordersLTPrice,
    ordersLTEPrice,
    ordersGTPrice,
    ordersGTEPrice,
    volumeLTPrice,
    volumeLTEPrice,
    volumeGTPrice,
    volumeGTEPrice,
    nullOrders,
    -- * MultiAssetOrderBook reading utilities
    withEachAsset
) where

import           Prelude                         (Bool, IO, Maybe, Monad)

import           Data.Aeson                      (ToJSON)
import           Data.Kind                       (Type)

import           GeniusYield.OrderBot.Types      ( OrderAssetPair(..)
                                                 , OrderType (BuyOrder, SellOrder)
                                                 , OrderInfo, Price, Volume
                                                 , SOrderTypeI
                                                 )
import           GeniusYield.OrderBot.DataSource ( Connection )

import           GeniusYield.Api.Dex.Constants    (DEXInfo)

-------------------------------------------------------------------------------
-- Core Order book types
-------------------------------------------------------------------------------

{- | In a DEX, with the existence of many possible asset pairings, an order book is really
a collection of several orderbooks - all belonging to specific token pairings.
-}
data MultiAssetOrderBook

mkMultiAssetOrderBook :: [(OrderAssetPair, OrderBook)] -> MultiAssetOrderBook

maOrderBookToList :: MultiAssetOrderBook -> [(OrderAssetPair, OrderBook)]

{- | The "Order book", in the context of the order matching bot, is a data source
that can efficiently answer queries like:
1. What are the intersecting buy and sell orders?
2. What is the max bid?
3. What is the min ask?

etc.
-}
data OrderBook

{- | It is helpful to have the JSON version of an order book. If it isn't
     interesting on your implementation, you can always give the instance with
     the empty object.

     instance ToJSON OrderBook where
         toJSON _ = object []
-}
instance ToJSON OrderBook

-------------------------------------------------------------------------------
-- Order book components
-------------------------------------------------------------------------------

-- | The simple and partial DEX orders for a particular 'OrderAssetPair'.
type Orders :: OrderType -> Type
data Orders t

-------------------------------------------------------------------------------
-- Order book population related interfaces
-------------------------------------------------------------------------------

{- | Given a DB connection to a database holding information about GY DEX orders on the blockchain,
return a populated OrderBook.

Also takes the compiled plutus scripts of the GY DEX.

Also takes a list of token pairs to filter uninteresting orders. This should be
passed to the datasource function(s).

The 'OrderBot.DataSource' signature also exposes functions to query buy orders, and sell orders.
This implementation may use those as necessary.
-}
populateOrderBook
    :: Connection
    -> DEXInfo
    -> [OrderAssetPair]
    -> IO MultiAssetOrderBook

buildOrderBookList
  :: [(OrderAssetPair, OrderBook)]
  -> (# OrderAssetPair, [OrderInfo 'BuyOrder], [OrderInfo 'SellOrder] #)
  -> [(OrderAssetPair, OrderBook)]
-------------------------------------------------------------------------------
-- Order book queries
-------------------------------------------------------------------------------

-- Components

-- | An empty 'Orders' data structure.
emptyOrders :: Orders t

-- | If the 'Orders' data structure is empty, return 'Nothing', else return the tip and the rest.
unconsOrders :: Orders t -> Maybe (OrderInfo t, Orders t)

-- | Insert an order into the 'Orders' data structure.
insertOrder :: OrderInfo t -> Orders t -> Orders t

-- | Delete an order from the 'Orders' data structure.
deleteOrder :: OrderInfo t -> Orders t -> Orders t

buyOrders :: OrderBook -> Orders 'BuyOrder

sellOrders :: OrderBook -> Orders 'SellOrder

-- Minima & Maxima

-- | The lowest sell order in the 'Orders' data structure. Fails if the 'Orders' data structure is empty.
lowestSell :: Orders 'SellOrder -> OrderInfo 'SellOrder

-- | The lowest sell order in the 'Orders' data structure. Returns 'Nothing' if the 'Orders' data structure is empty.
lowestSellMaybe :: Orders 'SellOrder -> Maybe (OrderInfo 'SellOrder)

-- | The highest buy order in the 'Orders' data structure. Fails if the 'Orders' data structure is empty.
highestBuy :: Orders 'BuyOrder -> OrderInfo 'BuyOrder

-- | The highest buy order in the 'Orders' data structure. Returns 'Nothing' if the 'Orders' data structure is empty.
highestBuyMaybe :: Orders 'BuyOrder -> Maybe (OrderInfo 'BuyOrder)

-- | In case we have buy orders, return the best buy order (highest price). And in case we have sell orders, return the best sell order (lowest price).
lookupBest :: forall (t :: OrderType). SOrderTypeI t => Orders t -> Maybe (OrderInfo t)

-- Slicing

withoutTip :: Orders t -> Orders t

-- Folds

-- TODO: Document that it should be strict in accumulator.
{- | Left associative fold over the 'Orders' data structure.

The order in which each 'OrderInfo' is passed onto the function, depends on the type of
'Orders'.

For sell orders, it should act like a 'foldl' on a list with _ascending_ orders based on price.
For buy orders, it should act like a 'foldl' on a list with _descending_ orders based on price.
-}
foldlOrders :: forall a t. (a -> OrderInfo t -> a) -> a -> Orders t -> a

{- | Right associative fold over the 'Orders' data structure.

The order in which each 'OrderInfo' is passed onto the function, depends on the type of
'Orders'.

For sell orders, it should act like a 'foldr' on a list with _ascending_ orders based on price.
For buy orders, it should act like a 'foldr' on a list with _descending_ orders based on price.
-}
foldrOrders :: forall a t. (OrderInfo t -> a -> a) -> a -> Orders t -> a

-- | @foldlM@ variant for 'Orders', you should almost always be using @foldlMOrders'@ instead.
foldlMOrders :: forall a t m. Monad m => (a -> OrderInfo t -> m a) -> a -> Orders t -> m a

-- | Filter orders based on a predicate.
filterOrders :: (OrderInfo t -> Bool) -> Orders t -> Orders t

-- Price queries

ordersLTPrice :: Price -> Orders t -> Orders t

ordersLTEPrice :: Price -> Orders t -> Orders t

ordersGTPrice :: Price -> Orders t -> Orders t

ordersGTEPrice :: Price -> Orders t -> Orders t

-- Volume queries

volumeLTPrice :: Price -> Orders t -> Volume

volumeLTEPrice :: Price -> Orders t -> Volume

volumeGTPrice :: Price -> Orders t -> Volume

volumeGTEPrice :: Price -> Orders t -> Volume

nullOrders :: Orders t -> Bool

-------------------------------------------------------------------------------
-- MultiAssetOrderBook reading utilities
-------------------------------------------------------------------------------

withEachAsset :: (OrderAssetPair -> OrderBook -> [a]) -> MultiAssetOrderBook -> [a]
